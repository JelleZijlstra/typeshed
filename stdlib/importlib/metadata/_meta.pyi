from _typeshed import Self
from collections.abc import Iterator
from typing import Any, Protocol, TypeVar

_T = TypeVar("_T")

class PackageMetadata(Protocol):
    def __len__(self) -> int: ...
    def __contains__(self, item: str) -> bool: ...
    def __getitem__(self, key: str) -> str: ...
    def __iter__(self) -> Iterator[str]: ...
    def get_all(self, name: str, failobj: _T = ...) -> list[Any] | _T: ...
    @property
    def json(self) -> dict[str, str | list[str]]: ...

# Protocol deviates from runtime implementation.  The latter is not assignable
# to common path-likes like `pathlib.Path` and `zipfile.Path`.
class SimplePath(Protocol):
    def joinpath(self: Self, *other: str | Self) -> Self: ...
    @property
    def parent(self: Self) -> Self: ...
    def read_text(self, encoding: str | None = ...) -> str: ...
    def __truediv__(self: Self, __other: str | Self) -> Self: ...
